import java.awt.Color;
import java.util.HashMap;
import java.util.LinkedList;

import org.jgraph.graph.DefaultGraphCell;


public class HeapFake extends Drawer{
	LinkedList<Node> list;
	public HeapFake(){
		list = new LinkedList<Node>();
	}
	
	public boolean add(int a){
		if(!contains(a)){
			list.add(list.size(), new Node(a));
			System.out.println(a);
			return true;
		}
		return false;
	}
	
	public boolean contains(int a){
		for(Node b : list){
			if(b.getKey() == a)
				return true;
		}
		return false;
	}
	public void draw(){
		int x = 0;
		int y = 30;
		int lvl = 0;
		HashMap<Integer,DefaultGraphCell> cells = new HashMap<Integer, DefaultGraphCell>();
		for(int i = 0; i < list.size(); i++){
			if(i%2 == 0){
				if(i != 0)
					x = (int) (list.get(i/2 - 1).getX() + DEFAULT_SIZE.width/Math.scalb(1.0, lvl+1));
				else
					x = (int) (DEFAULT_SIZE.width/Math.scalb(1.0, lvl+1));
			}
			else{
				System.out.println(lvl + 1);
				x = (int) (list.get(i/2).getX() - DEFAULT_SIZE.width/Math.scalb(1.0, lvl+1));
				
			}
			if(Math.scalb(1.0, lvl) == i){
				lvl++;
				y+=deltaY;
			}
			createMyVertex(cells, list.get(i), x, y, Color.red);
			list.get(i).setX(x);
		}

		
		jgraph.getGraphLayoutCache().insert(cells.values().toArray());
		drawStructure(jgraph);
	}
}
